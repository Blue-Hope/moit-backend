name: DEPLOY
on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Branch name
        id: get-branch
        run: echo ::set-output name=branch-name::${GITHUB_REF#refs/*/}

      - name: Generate Image Tag
        run: echo IMAGE_TAG=$(date +%s) >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} -t ${{ env.ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:latest .
          docker push ${{ env.ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:latest
          echo "::set-output name=image::${{ env.ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
      - name: Deploy File
        run: |
          aws s3 cp ./Dockerrun.aws.json s3://elasticbeanstalk-ap-northeast-2-539820303388/prod/${{ env.IMAGE_TAG }}-Dockerrun.aws.json
          aws elasticbeanstalk create-application-version \
            --application-name moit-server \
            --version-label ${{ env.IMAGE_TAG }} \
            --source-bundle S3Bucket=\"elasticbeanstalk-ap-northeast-2-539820303388\",S3Key=\"prod/${{ env.IMAGE_TAG }}-Dockerrun.aws.json\"
          aws elasticbeanstalk update-environment \
            --application-name moit-server \
            --environment-name Moitserver-env \
            --solution-stack-name "64bit Amazon Linux 2 v3.4.5 running Docker" \
            --version-label ${{ env.IMAGE_TAG }}
      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
